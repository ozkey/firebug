module.exports = gameBoard;
var character = require(__dirname + '/character.js');


function gameBoard (libTHREE ,camera, scene , type) {
    'use strict';
    var THREE = libTHREE;

    var sectorData =[[[]]];
    var avatars = [];
    var $this = this
    this.gameBoardType = type;
    this.username = "";


    // Process the character motions

    this.newAvatar= function(username) {
        var avatar = new character(THREE, "", username);
        scene.add(avatar.mesh);
        this.addAvatar(avatar);
        return avatar;
    }
    this.addAvatar= function (avatar) {
        avatars.push(avatar);
        //console.log( "getPosition" +      avatar.getPosition().x );
    };

    this.deleteAvatar = function(avatar){
        console.log("delete avatar");
        avatars.pop(avatar);
    }
    this.setUsername = function(username){
        this.username = username;
    }




    this.deleteAvatarUsername = function(username){
        for (var i in avatars) {
            var avatar = avatars[i];
            if (username === avatar.username) {
                $this.deleteAvatar(avatar);
                return;
            }
        }
    }
    this.getSectorData = function(x,y,z){

    };
    this.getSectorDataVisual = function(avatar,visual){
        return avatars;
    };
    this.getSectorComsDataVisual = function(avatar,visual){
        var avatarsInSector = $this.getSectorDataVisual(avatar,visual);
        var commsData  = [];
        for (var i in avatarsInSector) {
            commsData.push(avatarsInSector[i].getCommsData());
        }
        return commsData;
    };

    this.updateGameBoard = function(data){
        var UpdatedAvatars = [];

        for(var d in data){
            var avatarData = data[d];
            var found = false;
            for (var i in avatars) {
                var avatar = avatars[i];

                if(avatarData.username ===  avatar.username){
                    avatar.setPosition(avatarData.position.x,avatarData.position.y,avatarData.position.z)
                    avatar.setDirection(avatarData.direction)
                    UpdatedAvatars.push(avatar);

console.log($this.username +"==="+ avatar.username);
                    if($this.username === avatar.username){
                        camera.position.set(avatarData.position.x,avatarData.position.y,avatarData.position.z);

                        console.log(" avatar updated" + avatarData.username + " x= " +  avatarData.direction.x+ " y= " +avatarData.direction.y+ " z= " +avatarData.direction.z);

                    }
                    found = true;
                }
            }
            if(!found){
                var avatar = this.newAvatar(avatarData.username);
                avatar.setPosition(avatarData.position.x,avatarData.position.y,avatarData.position.z);
                avatar.setDirection(avatarData.direction)
                UpdatedAvatars.push(avatar);
                console.log("new avatar updated" + avatarData.username + " x= " +  avatarData.direction.x+ " y= " +avatarData.direction.y+ " z= " +avatarData.direction.z);
            }
        }

        avatars = UpdatedAvatars;
        console.log("new data recived");

    };

    this.getAvatars = function(){
        return avatars;
    };
    this.setAvatars=function(newAvatars){
        this.avatars = newAvatars;
    };

    this.getAvatar = function(username){
        for (var i in avatars) {
            var avatar = avatars[i];
            if (username === avatar.username) {
                return avatar;
            }
        }
    }

}



