var THREE = require('three');
var character = require(__dirname + '/public/js/character.js');

var gameBoard = require(__dirname + '/public/js/gameBoard.js');

module.exports = gameServer;

function gameServer (io) {
    'use strict';

    console.log("gameServer");
    var $this = this;
    var usersComData = {};
    var usersData = {};
    var camera, scene, renderer;
    var geometry, material, mesh;

    init3D();

    var gameBoardServer = new gameBoard( THREE ,camera, scene , "server");

    animate();
    setInterval(function(){animate(mesh)}, 1);

    //public methods
    this.removeUser = function(username) {
        gameBoardServer.deleteAvatarUsername(username);
        delete usersComData[username];
        //usersComData.pop(username);
        delete usersData[username];
       // usersData.pop(username);
    }

    this.eventManager = function () {


        io.sockets.on('connection', function (socket) {

            // when the client emits 'sendchat', this listens and executes
            socket.on('sendchat', function (data) {
                // we tell the client to execute 'updatedata' with 2 parameters
                io.sockets.emit('updatedata', socket.username, data);
            });

            socket.on('sendkey', function (data) {

                var controls = {};

                controls.x = 0;
                controls.y = 0;
                controls.z = 0;

                if(data ==  "37"){
                    controls.x = -1;
                }else if(data ==  "38"){
                    controls.z = -1;
                }else if(data ==  "39"){
                    controls.x = 1;
                }else if(data ==  "40"){
                    controls.z = 1;
                }

                usersData[ socket.username].avatar.setDirection(controls);

            });

            // when the client emits 'adduser', this listens and executes
            socket.on('adduser', function (username) {
                // we store the username in the socket session for this client
                socket.username = username;
                // add the client's username to the global list
                usersComData[username] = username;
                // echo to client they've connected
                socket.emit('updatedata', 'SERVER', 'you have connected');
                // echo globally (all clients) that a person has connected
                //socket.broadcast.emit will send the message to all the other clients except the newly created connection
                socket.broadcast.emit('updatedata', 'SERVER', username + ' has connected');
                // update the list of users in chat, client-side
                //io.sockets.emit will send to all the clients
                io.sockets.emit('updateusers', usersComData);

                //create avatar
                var avatar = $this.createAvatar(username);
                var gameBoardData = gameBoardServer.getSectorComsDataVisual(avatar,1)
                socket.emit('gameBoardData',gameBoardData);

                usersData[username] = {"username" : username, "socket" : socket , "avatar" : avatar };

            });

            // when the user disconnects.. perform this
            socket.on('disconnect', function () {
                // remove the username from global usersComData list
                var username = socket.username;
                $this.removeUser(username);
                // update list of users in chat, client-side
                io.sockets.emit('updateusers', usersComData);
                // echo globally that this client has left
                socket.broadcast.emit('updatedata', 'SERVER', username + ' has disconnected');
            });
        });
    };
    this.createAvatar = function (username) {
        return gameBoardServer.newAvatar(username);
    };




    function init3D() {
        var width = 100;
        var height = 100;
        scene = new THREE.Scene();
    }

    function animate() {
        var avatars = gameBoardServer.getAvatars();
        for (var i in avatars) {
            //console.log("avatar" + i);
            avatars[i].motion();
            var gameBoardData = gameBoardServer.getSectorComsDataVisual(avatars[i],1);
            var userData = usersData[avatars[i].username];

            try{
                userData.socket.emit('gameBoardData',gameBoardData);
            }catch (e){
                console.log("bad .... deleted?" + avatars[i].username);
                $this.removeUser(avatars[i].username);
            }

        }
    }

}



